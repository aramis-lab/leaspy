
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_quickstart.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_quickstart.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_quickstart.py:


Quickstart with Leaspy
======================

.. GENERATED FROM PYTHON SOURCE LINES 7-10

Comprehensive example
---------------------
We first load synthetic data in a long format to get of a grasp of longitudinal data:

.. GENERATED FROM PYTHON SOURCE LINES 10-18

.. code-block:: Python


    from leaspy.datasets import load_dataset

    alzheimer_df = load_dataset("alzheimer-multivariate")
    print(alzheimer_df.columns)
    alzheimer_df = alzheimer_df[["MMSE", "RAVLT", "FAQ", "FDG PET"]]
    print(alzheimer_df.head())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /Users/lea.aguilhon/Documents/leaspy/src/leaspy/models/abstract_model.py:320: SyntaxWarning: assertion is always true, perhaps remove parentheses?
      assert (
    /Users/lea.aguilhon/Documents/leaspy/src/leaspy/models/abstract_model.py:325: SyntaxWarning: assertion is always true, perhaps remove parentheses?
      assert (
    Index(['E-Cog Subject', 'E-Cog Study-partner', 'MMSE', 'RAVLT', 'FAQ',
           'FDG PET', 'Hippocampus volume ratio'],
          dtype='object')
                          MMSE     RAVLT       FAQ   FDG PET
    ID     TIME                                             
    GS-001 73.973183  0.111998  0.510524  0.178827  0.454605
           74.573181  0.029991  0.749223  0.181327  0.450064
           75.173180  0.121922  0.779680  0.026179  0.662006
           75.773186  0.092102  0.649391  0.156153  0.585949
           75.973183  0.203874  0.612311  0.320484  0.634809




.. GENERATED FROM PYTHON SOURCE LINES 19-26

The data correspond to repeated visits (`TIME` index) of different participants (`ID` index).
Each visit corresponds to the measurement of 4 different outcomes : the MMSE, the RAVLT, the FAQ and the FDG PET.
If plotted, the data would look like the following:

.. image:: ../alzheimer-observations.png
    :width: 600
    :alt: Alzeimer observations

.. GENERATED FROM PYTHON SOURCE LINES 28-30

Where each color corresponds to a variable, and the connected dots corresponds to the repeated visits of a single participant.
Not very engaging, right ? To go a step further, let's first encapsulate the data into the main `Data` container:

.. GENERATED FROM PYTHON SOURCE LINES 30-36

.. code-block:: Python


    from leaspy.io.data import Data, Dataset

    data = Data.from_dataframe(alzheimer_df)
    dataset = Dataset(data)








.. GENERATED FROM PYTHON SOURCE LINES 37-39

Leaspy core functionality is to estimate the group-average trajectory of the different variables that are measured in a population.
Clinical scores often have a ceiling and a floor effect, so let's initialize a multivariate logistic model:

.. GENERATED FROM PYTHON SOURCE LINES 39-44

.. code-block:: Python


    from leaspy.models import LogisticMultivariateModel

    model = LogisticMultivariateModel(name="test-model", source_dimension=2)








.. GENERATED FROM PYTHON SOURCE LINES 45-46

As well as the algorithm needed to estimate the group-average trajectory:

.. GENERATED FROM PYTHON SOURCE LINES 46-56

.. code-block:: Python


    from leaspy.algo import AlgorithmSettings, algorithm_factory

    fit_settings = AlgorithmSettings(
        "mcmc_saem", seed=42, n_iter=100, progress_bar=False, save_periodicity=None
    )
    algorithm = algorithm_factory(fit_settings)
    model.initialize(dataset, fit_settings.model_initialization_method)
    algorithm.run(model, dataset)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /Users/lea.aguilhon/Documents/leaspy/src/leaspy/algo/settings.py:358: UserWarning: The parameters ['save_periodicity'] were not present by default and are likely to be unsupported.
      warnings.warn(
    /Users/lea.aguilhon/Documents/leaspy/src/leaspy/algo/settings.py:76: UserWarning: Outputs will be saved in '_outputs' relative to the current working directory
      self._create_root_folder(settings)
     ==> Setting seed to 42
    /Users/lea.aguilhon/miniforge3/envs/env_poetry/lib/python3.9/site-packages/torch/__init__.py:1144: UserWarning: torch.set_default_tensor_type() is deprecated as of PyTorch 2.1, please use torch.set_default_dtype() and torch.set_default_device() as alternatives. (Triggered internally at /Users/runner/work/pytorch/pytorch/pytorch/torch/csrc/tensor/python_tensor.cpp:434.)
      _C._set_default_tensor_type(t)

    Fit with `mcmc_saem` took: 5s

    <leaspy.variables.state.State object at 0x31dc4e4f0>



.. GENERATED FROM PYTHON SOURCE LINES 57-62

If we were to plot the measured average progression of the variables, see started example notebook for details, it would look like the following:

.. image:: ../alzheimer-model.png
    :width: 600
    :alt: Alzeimer model

.. GENERATED FROM PYTHON SOURCE LINES 64-66

We can also derive the individual trajectory of each subject.
To do this, we use a personalization algorithm called `scipy_minimize`:

.. GENERATED FROM PYTHON SOURCE LINES 66-72

.. code-block:: Python


    personalize_settings = AlgorithmSettings("scipy_minimize", seed=0, progress_bar=False)
    algorithm = algorithm_factory(personalize_settings)
    individual_parameters = algorithm.run(model, dataset)
    print(individual_parameters.to_dataframe())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

     ==> Setting seed to 0
    /Users/lea.aguilhon/Documents/leaspy/src/leaspy/algo/personalize/scipy_minimize.py:626: UserWarning: In `scipy_minimize` you requested `use_jacobian=True` but it is not implemented in your model test-model. Falling back to `use_jacobian=False`...
      warnings.warn(

    Personalize with `scipy_minimize` took: 29s
            sources_0  sources_1        tau        xi
    ID                                               
    GS-001   0.520015   0.350554  78.325386 -0.347093
    GS-002  -0.726873  -0.153534  77.352524 -0.584460
    GS-003  -0.230949  -0.893830  77.240227  0.069170
    GS-004   0.139772  -0.115753  78.953125  0.428138
    GS-005   0.236131  -1.879302  85.566643 -0.010131
    ...           ...        ...        ...       ...
    GS-196   0.481077  -1.056942  73.662636  0.314918
    GS-197   0.532495   1.018669  81.427078 -0.557515
    GS-198  -0.120983  -0.098353  84.572418  0.161706
    GS-199  -0.012875  -2.901816  94.291451 -0.155363
    GS-200   0.926700  -0.820264  77.081573  0.781801

    [200 rows x 4 columns]




.. GENERATED FROM PYTHON SOURCE LINES 73-78

Plotting the input participant data against its personalization would give the following, see started example notebook for details.

.. image:: ../alzheimer-subject_trajectories.png
    :width: 600
    :alt: Alzeimer subject trajectories

.. GENERATED FROM PYTHON SOURCE LINES 80-88

Using my own data
-----------------

Data format
...........

Leaspy uses its own data container. To use it properly, you need to provide a csv file or a pandas.DataFrame in the right format: longitudinal data in a long format.
Let's have a look at the data used in the previous example:

.. GENERATED FROM PYTHON SOURCE LINES 88-91

.. code-block:: Python


    print(alzheimer_df.head())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

                          MMSE     RAVLT       FAQ   FDG PET
    ID     TIME                                             
    GS-001 73.973183  0.111998  0.510524  0.178827  0.454605
           74.573181  0.029991  0.749223  0.181327  0.450064
           75.173180  0.121922  0.779680  0.026179  0.662006
           75.773186  0.092102  0.649391  0.156153  0.585949
           75.973183  0.203874  0.612311  0.320484  0.634809




.. GENERATED FROM PYTHON SOURCE LINES 92-93

You **MUST** have `ID` and `TIME`, either in index or in the columns. The other columns must be the observed variables (also named features or endpoints). In this fashion, you have one column per feature and one line per visit.

.. GENERATED FROM PYTHON SOURCE LINES 95-100

Data scale & constraints
........................

Leaspy uses linear and logistic models. The features MUST be increasing with time. For the logistic model, you need to rescale your data between 0 and 1.


.. GENERATED FROM PYTHON SOURCE LINES 102-105

Missing data
............
Leaspy automatically handles missing data as long as they are encoded as nan in your pandas.DataFrame, or as empty values in your csv file.

.. GENERATED FROM PYTHON SOURCE LINES 107-114

Going further
.............
You can check the [user_guide](../user_guide.md) and the full API documentation.

You can also dive into the [examples](./index.rst).

The [Disease Progression Modelling](https://disease-progression-modelling.github.io/) website also hosts a [mathematical introduction](https://disease-progression-modelling.github.io/pages/models/disease_course_mapping.html) and [tutorials](https://disease-progression-modelling.github.io/pages/notebooks/disease_course_mapping/disease_course_mapping.html) for Leaspy.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 37.378 seconds)


.. _sphx_glr_download_auto_examples_plot_quickstart.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_quickstart.ipynb <plot_quickstart.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_quickstart.py <plot_quickstart.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_quickstart.zip <plot_quickstart.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
